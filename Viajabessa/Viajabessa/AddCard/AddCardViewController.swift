//
//  AddCardViewController.swift
//  Viajabessa
//
//  Created by Lucas Ferraço on 15/05/18.
//  Copyright (c) 2018 Lucas Ferraço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Caishen

protocol AddCardDisplayLogic: class {
	func displaySavingResult(_ viewModel: AddCard.Save.ViewModel)
}

class AddCardViewController: UIViewController, AddCardDisplayLogic {
	var interactor: AddCardBusinessLogic?
	var router: (NSObjectProtocol & AddCardRoutingLogic & AddCardDataPassing)?
	
	@IBOutlet weak var nameTextField: UITextField!
	@IBOutlet weak var numberTextField: NumberInputTextField!
	@IBOutlet weak var cvvTextField: CVCInputTextField!
	@IBOutlet weak var monthTextField: MonthInputTextField!
	@IBOutlet weak var yearTextField: YearInputTextField!
	
	
	// A card that is not nil when valid information has been entered in the text fields:
	var card: Card? {
		let number = numberTextField.cardNumber
		let cvc = CVC(rawValue: cvvTextField.text ?? "")
		let expiry = Expiry(month: monthTextField.text ?? "", year: yearTextField.text ?? "")
			?? Expiry.invalid
		
		let cardType = numberTextField.cardTypeRegister.cardType(for: numberTextField.cardNumber)
		if cardType.validate(cvc: cvc).union(cardType.validate(expiry: expiry)).union(cardType.validate(number: number)) == .Valid {
			return Card(number: number, cvc: cvc, expiry: expiry)
		} else {
			return nil
		}
	}
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		let viewController = self
		let interactor = AddCardInteractor()
		let presenter = AddCardPresenter()
		let router = AddCardRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(self.dismissKeyboard))
		self.view.addGestureRecognizer(tap)
		
		self.numberTextField.numberInputTextFieldDelegate = self
		self.numberTextField.cardTypeRegister.register(cardType: CreditCard())
		
		self.cvvTextField.cardInfoTextFieldDelegate = self
	}
	
	// MARK: Do something
	
	//@IBOutlet weak var nameTextField: UITextField!
	
	func storeCard(card: Card) {
		let request = AddCard.Save.Request(card: card)
		interactor?.storeCard(request)
	}
	
	func displaySavingResult(_ viewModel: AddCard.Save.ViewModel) {
		self.router?.routeToBuyTravelPackage()
	}
	
	@IBAction func saveCard(_ sender: Any) {
		self.saveCreditCard()
	}
	
	func saveCreditCard() {
		if let holderName = self.nameTextField.text, let card = self.card {
			if !holderName.isEmpty {
				self.storeCard(card: card)
			} else {
				self.wrongInfoAlert("O nome não pode ser vazio.")
			}
		} else {
			self.wrongInfoAlert()
		}
	}
	
	func wrongInfoAlert(_ message: String? = nil) {
		let unwrappedMessage = message != nil ? message! : "Insira dados de um cartão de crédito válido."
		
		let alert = UIAlertController(title: "Informações inválidas", message: unwrappedMessage, preferredStyle: .alert)
		let action = UIAlertAction(title: "Ok", style: .default) { (_) in
			self.nameTextField.becomeFirstResponder()
		}
		alert.addAction(action)
		self.present(alert, animated: true)
	}
	
	@objc func dismissKeyboard() {
		self.view.endEditing(true)
	}
}

extension AddCardViewController: NumberInputTextFieldDelegate, CardInfoTextFieldDelegate {
	func numberInputTextFieldDidComplete(_ numberInputTextField: NumberInputTextField) {
		cvvTextField.cardType = numberInputTextField.cardTypeRegister.cardType(for: numberInputTextField.cardNumber)
	}
	
	func numberInputTextFieldDidChangeText(_ numberInputTextField: NumberInputTextField) {
		
	}
	
	func textField(_ textField: UITextField, didEnterValidInfo: String) {
		switch textField {
		case self.numberTextField:
			self.cvvTextField.becomeFirstResponder()
		case self.cvvTextField:
			self.monthTextField.becomeFirstResponder()
		case self.monthTextField:
			self.yearTextField.becomeFirstResponder()
		case self.yearTextField:
			self.saveCreditCard()
		default:
			break
		}
	}
	
	func textField(_ textField: UITextField, didEnterPartiallyValidInfo: String) {
		
	}
	
	func textField(_ textField: UITextField, didEnterOverflowInfo overFlowDigits: String) {
		
	}
}
