//
//  ViajabessaAPIWorker.swift
//  Viajabessa
//
//  Created by Lucas Ferraço on 14/05/18.
//  Copyright (c) 2018 Lucas Ferraço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Reachability

enum ViajabessaAPIError: Error {
	case NoConnection
	case CouldNotParseResponse
	case Failure(String)
	case Unknown
}

class ViajabessaAPIWorker {
	
	private let apiURLString = "https://private-a3e3bd-viajabessa62.apiary-mock.com/"
	
	private struct EndPoints: Decodable {
		let transactions: String
		let packages: String
		
		private enum CodingKeys: String, CodingKey {
			case transactions 	= "trasacoes"
			case packages 		= "pacotes"
		}
		
		init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: CodingKeys.self)
			transactions = try values.decode(String.self, forKey: .transactions)
			packages = try values.decode(String.self, forKey: .packages)
		}
	}
	private var endPoints: EndPoints? = nil
	
	private let httpRequestsWorker = HTTPRequestsWorker()
	
	//MARK: Singleton Definition
	private static var theOnlyInstance: ViajabessaAPIWorker?
	static var shared: ViajabessaAPIWorker {
		get {
			if theOnlyInstance == nil {
				theOnlyInstance = ViajabessaAPIWorker()
			}
			return theOnlyInstance!
		}
	}
	
	private init() {
		if self.canReachNetwork() {
			self.getEndPoints()
		}
	}
	
	// MARK: Auxiliary methods
	
	private func canReachNetwork() -> Bool {
		if let reachAbility = Reachability(), reachAbility.connection != .none {
			return true
		} else {
			return false
		}
	}
	
	private func getEndPoints(_ completion: ((ViajabessaAPIError?) -> Void)? = nil) {
		self.httpRequestsWorker.getHTTP(at: self.apiURLString) { (endPoints: EndPoints?, error) in
			if let endPoints = endPoints {
				self.endPoints = endPoints
				completion?(nil)
			} else if let error = error {
				completion?(self.getVAError(from: error))
			} else {
				completion?(.Unknown)
			}
		}
	}
	
	private func getVAError(from httpError: HTTPRequestsError) -> ViajabessaAPIError {
		switch httpError {
		case .CouldNotFormURL:
			return .Failure("Entre em contato com a Viajabessa.")
		case .CouldNotParseResponse:
			return .CouldNotParseResponse
		case .Failure(let data):
			return .Failure(data)
		case .Unknown(_):
			return .Unknown
		}
	}
	
	// MARK: API capabilities
	
	public func getAllTravelPackages(_ completion: @escaping ([TravelPackage]?, ViajabessaAPIError?) -> Void) {
		guard self.canReachNetwork() else {
			completion(nil, .NoConnection)
			return
		}
		
		if self.endPoints == nil {
			self.getEndPoints() { (error) in
				if let error = error {
					completion(nil, error)
				} else {
					self.fetchTravelPackages(completion)
				}
			}
		} else {
			self.fetchTravelPackages(completion)
		}
	}
	
	private func fetchTravelPackages(_ completion: @escaping ([TravelPackage]?, ViajabessaAPIError?) -> Void) {
		if let packageEndPoint = self.endPoints?.packages {
			self.httpRequestsWorker.getHTTP(at: self.apiURLString + packageEndPoint) { (travelPackages: [TravelPackage]?, error) in
				if let travelPackages = travelPackages {
					travelPackages.forEach({ (package) in
						self.downloadImage(for: package)
					})
					
					completion(travelPackages, nil)
				} else if let error = error {
					completion(nil, self.getVAError(from: error))
				} else {
					completion(nil, .Unknown)
				}
			}
		} else {
			completion(nil, .Failure("Não foi possível recuperar os end points da API."))
		}
	}
	
	private func downloadImage(for package: TravelPackage) {
		self.httpRequestsWorker.getHTTP(at: package.imageURLString) { (imageData: Data?, error) in
			if let imageData = imageData, let image = UIImage(data: imageData) {
				package.image = image
			}
		}
	}
	
	public func buyPackage(with transaction: Transaction, _ completion: @escaping (ViajabessaAPIError?) -> Void) {
		guard self.canReachNetwork() else {
			completion(.NoConnection)
			return
		}
		
		if self.endPoints == nil {
			self.getEndPoints() { (error) in
				if let error = error {
					completion(error)
				} else {
					self.postTransaction(transaction, completion)
				}
			}
		} else {
			self.postTransaction(transaction, completion)
		}
	}
	
	private func postTransaction(_ transaction: Transaction, _ completion: @escaping (ViajabessaAPIError?) -> Void) {
		if let transactionsEndPoint = self.endPoints?.transactions {
			self.httpRequestsWorker.postHTTP(at: self.apiURLString + transactionsEndPoint, withEncodableObj: transaction) { (response, error) in
				if let response = response, response.statusCode == 200 || response.statusCode == 201 {
					completion(nil)
				} else if let error = error {
					completion(self.getVAError(from: error))
				} else {
					completion(.Unknown)
				}
			}
		} else {
			completion(.Failure("Não foi possível recuperar os end points da API."))
		}
	}
}
